apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def commitSHA1 = 'COMMIT_SHA1'
def gitRemote = 'GIT_REMOTE'

dependencies {
    /// dependencies for app building
    implementation project(':owncloud-android-library:owncloudComLibrary')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.legacy:legacy-support-v4:$androidX"
    implementation "androidx.annotation:annotation:1.0.1"
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.jakewharton:disklrucache:2.0.2'
    implementation 'com.google.android.exoplayer:exoplayer:r2.2.0'
    implementation 'com.andrognito.patternlockview:patternlockview:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.browser:browser:$androidX"
    implementation 'commons-io:commons-io:2.6'
    /// dependencies for local unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.19.0'
    /// dependencies for instrumented tests
    // JUnit4 Rules
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    // Android JUnit Runner
    androidTestImplementation 'androidx.test:runner:1.1.1'
    // Espresso core
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    // Espresso web
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.1'
    // UIAutomator - for cross-app UI tests, and to grant screen is turned on in Espresso tests
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    // fix conflict in dependencies; see http://g.co/androidstudio/app-test-app-conflict for details
    androidTestImplementation 'androidx.annotation:annotation:1.0.1'
    // Image loading
    implementation('com.github.bumptech.glide:glide:4.6.1') {
        exclude group: "com.android.support"
    }

    //Zooming Android ImageView.
    implementation 'com.github.chrisbanes:PhotoView:2.1.4'
    // Convert Java Objects into JSON and back
    implementation 'com.google.code.gson:gson:2.8.5'
}

tasks.withType(Test) {
    /// increased logging for tests
    testLogging {
        events "passed", "skipped", "failed"
    }
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        applicationId "com.box101.plus"
        versionCode = 21002001
        versionName = "2.11.0-beta.1"

        buildConfigField "String", gitRemote, "\"" + getGitOriginRemote() + "\""
        buildConfigField "String", commitSHA1, "\"" + getLatestGitHash() + "\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // arguments to be passed to functional tests
        testInstrumentationRunnerArgument "TEST_USER", "\"$System.env.OCTEST_APP_USERNAME\""
        testInstrumentationRunnerArgument "TEST_PASSWORD", "\"$System.env.OCTEST_APP_PASSWORD\""
        testInstrumentationRunnerArgument "TEST_USER2", "\"$System.env.OCTEST_APP_USERNAME2\""
        testInstrumentationRunnerArgument "TEST_PASSWORD2", "\"$System.env.OCTEST_APP_PASSWORD2\""
        testInstrumentationRunnerArgument "TEST_SERVER_URL", "\"$System.env.OCTEST_SERVER_BASE_URL\""
        testInstrumentationRunnerArgument "TRUSTED", "\"$System.env.OCTEST_SERVER_TRUSTED\""
        testInstrumentationRunnerArgument "TEST_USERNAME_ID", "\"$System.env.OCTEST_WEB_USERFIELD\""
        testInstrumentationRunnerArgument "TEST_PASSWORD_ID", "\"$System.env.OCTEST_WEB_PASSFIELD\""
        testInstrumentationRunnerArgument "TEST_SUBMIT_XPATH", "\"$System.env.OCTEST_WEB_SUBMITXPATH\""
        testInstrumentationRunnerArgument "TEST_LOOKUP", "\"$System.env.OCTEST_SERVER_LOOKUP\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }

    adbOptions {
        timeOutInMs(20 * 60 * 1000)
    }

    signingConfigs {
        release {
            if (System.env.OC_RELEASE_KEYSTORE) {
                storeFile file(System.env.OC_RELEASE_KEYSTORE)  // use an absolute path
                storePassword System.env.OC_RELEASE_KEYSTORE_PASSWORD
                keyAlias System.env.OC_RELEASE_KEY_ALIAS
                keyPassword System.env.OC_RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {

        release {
            if (System.env.OC_RELEASE_KEYSTORE) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            applicationIdSuffix ".debug"
        }
    }

    applicationVariants.all { variant ->
        def appName = System.env.OC_APP_NAME
        setOutputFileName(variant, appName, project)
    }
}

// Updates output file names of a given variant to format
// [appName].[variant.versionName].[OC_BUILD_NUMBER]-[variant.name].apk.
//
// OC_BUILD_NUMBER is an environment variable read directly in this method. If undefined, it's not added.
//
// @param variant           Build variant instance which output file name will be updated.
// @param appName           String to use as first part of the new file name. May be undefined, the original
//                          project.archivesBaseName property will be used instead.
// @param callerProject     Caller project.

def setOutputFileName(variant, appName, callerProject) {
    logger.info("Setting new name for output of variant $variant.name")

    def originalFile = variant.outputs[0].outputFile
    def originalName = originalFile.name
    println "originalName is $originalName"

    def newName = ""

    if (appName) {
        newName += appName
    } else {
        newName += "owncloud"
    }

    def versionName = "$variant.mergedFlavor.versionName"
    if (variant.mergedFlavor.manifestPlaceholders.versionName != null) {
        versionName = "$variant.mergedFlavor.manifestPlaceholders.versionName"
    }
    if (variant.buildType.manifestPlaceholders.versionName != null) {
        versionName = "$variant.buildType.manifestPlaceholders.versionName"
    }
    newName += "_$versionName"

    def buildNumber = System.env.OC_BUILD_NUMBER
    if (buildNumber) {
        newName += ".$buildNumber"
    }

    newName += originalName.substring(callerProject.archivesBaseName.length())

    println "$variant.name: newName is $newName"

    variant.outputs.all {
        outputFileName = new File(".", newName)
    }
}

static def getLatestGitHash() {
    def process = "git rev-parse --short HEAD".execute()
    return process.text.toString().trim()
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}
